name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Manual trigger
    inputs:
      reason:
        description: 'Deployment reason'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    name: Deploy to Vercel (Production)
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://parkboard.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel (Production)
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $url"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production..."
          sleep 10  # Wait for deployment to be fully ready

          # Check if site is accessible
          status_code=$(curl -s -o /dev/null -w "%{http_code}" https://parkboard.app)
          if [ "$status_code" -eq 200 ]; then
            echo "‚úÖ Production site is accessible (HTTP $status_code)"
          else
            echo "‚ùå Production site returned HTTP $status_code"
            exit 1
          fi

          # Check if API is responding
          api_status=$(curl -s -o /dev/null -w "%{http_code}" https://parkboard.app/api/health)
          echo "API health check: HTTP $api_status"

      - name: Create deployment summary
        run: |
          echo "## üöÄ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://parkboard.app" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "URL: https://parkboard.app"
          # Add Slack/Discord webhook here if configured

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Please check the logs and rollback if necessary"
          # Add Slack/Discord webhook here if configured
